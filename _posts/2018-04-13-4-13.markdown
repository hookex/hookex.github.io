---
layout: post
title: '【周报】4.13'
date: '2018-04-13 10:21:59'
---

#### 本周计划进展

| 项目名         | 进度              | 备注  |
| ------------- |:----------------| :---------|
| ELK test  |  10 day/6day  | ELK服务搭建完毕，增删改查逻辑走通 |
| 业务规划  |  50%  | 完成了AIO的模型，下周讨论方案 |



#### 下周计划

| 项目名         | 计划              | 备注  |
| ------------- |:----------------| :---------|
| ELK test  |  100%  | 在test环境中，完成基于ELK实现的inrouter数据计算 |
| 业务规划  |  100%  | 讨论方案 |

#### FreeTime 

##### 了解Vue2
由于业务规划的需求，原来接触过angular2和react,没有系统了解过Vue2.
重点了解了Vue2的渐进式开发，明白了针对借贷宝端外业务如何运用渐进式开发。



#### 问题、建议、总结或规划
##### AIO
http://naotu.baidu.com/file/43afcea49b2bd92784ec788ae791fb9e?token=9136187a7fef3f21
##### 工具复杂度和应用复杂度的关系
框架的存在是为了帮助我们应对复杂度。
当我们需要解决一些前端上工程问题的时候，这些问题会有不同的复杂度。如果你用太简陋的工具应对非常复杂的需求，就会极大地影响你的生产力。所以，框架本身是帮我们把一些重复的并且已经受过验证的模式，抽象到一个已经帮你设计好的API封装当中，帮助我们去应对这些复杂的问题。
但是，框架本身也会带来复杂度。这里就抽象出一个问题，就是要做的应用的复杂度与所使用的框架的复杂度的对比。
工具的复杂度是可以理解为是我们为了处理问题内在复杂度所做的投资。为什么叫投资？那是因为如果投的太少，就起不到规模的效应，不会有合理的回报。这就像创业公司拿风投，投多少是很重要的问题。如果要解决的问题本身是非常复杂的，那么你用一个过于简陋的工具应付它，就会遇到工具太弱而使得生产力受影响的问题。
所以，一切看场景。


#### 长期学习计划
- 《得到》
